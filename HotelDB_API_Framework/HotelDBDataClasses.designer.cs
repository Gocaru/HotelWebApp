#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelDB_API_Framework
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using Newtonsoft.Json;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HotelDB")]
	public partial class HotelDBDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBooking(Booking instance);
    partial void UpdateBooking(Booking instance);
    partial void DeleteBooking(Booking instance);
    partial void InsertExtraService(ExtraService instance);
    partial void UpdateExtraService(ExtraService instance);
    partial void DeleteExtraService(ExtraService instance);
    partial void InsertGuest(Guest instance);
    partial void UpdateGuest(Guest instance);
    partial void DeleteGuest(Guest instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public HotelDBDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelDBDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelDBDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelDBDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Booking> Bookings
		{
			get
			{
				return this.GetTable<Booking>();
			}
		}
		
		public System.Data.Linq.Table<ExtraService> ExtraServices
		{
			get
			{
				return this.GetTable<ExtraService>();
			}
		}
		
		public System.Data.Linq.Table<Guest> Guests
		{
			get
			{
				return this.GetTable<Guest>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bookings")]
	public partial class Booking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookingId;
		
		private int _GuestId;
		
		private int _RoomId;
		
		private System.Nullable<System.DateTime> _CheckInDate;
		
		private System.Nullable<System.DateTime> _CheckOutDate;
		
		private System.DateTime _ReservationDate;
		
		private System.Nullable<int> _NumberOfGuests;
		
		private int _Status;
		
		private EntitySet<ExtraService> _ExtraServices;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Guest> _Guest;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookingIdChanging(int value);
    partial void OnBookingIdChanged();
    partial void OnGuestIdChanging(int value);
    partial void OnGuestIdChanged();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnCheckInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckInDateChanged();
    partial void OnCheckOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckOutDateChanged();
    partial void OnReservationDateChanging(System.DateTime value);
    partial void OnReservationDateChanged();
    partial void OnNumberOfGuestsChanging(System.Nullable<int> value);
    partial void OnNumberOfGuestsChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public Booking()
		{
			this._ExtraServices = new EntitySet<ExtraService>(new Action<ExtraService>(this.attach_ExtraServices), new Action<ExtraService>(this.detach_ExtraServices));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Guest = default(EntityRef<Guest>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookingId
		{
			get
			{
				return this._BookingId;
			}
			set
			{
				if ((this._BookingId != value))
				{
					this.OnBookingIdChanging(value);
					this.SendPropertyChanging();
					this._BookingId = value;
					this.SendPropertyChanged("BookingId");
					this.OnBookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestId", DbType="Int NOT NULL")]
		public int GuestId
		{
			get
			{
				return this._GuestId;
			}
			set
			{
				if ((this._GuestId != value))
				{
					if (this._Guest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGuestIdChanging(value);
					this.SendPropertyChanging();
					this._GuestId = value;
					this.SendPropertyChanged("GuestId");
					this.OnGuestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="Int NOT NULL")]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInDate", DbType="Date")]
		public System.Nullable<System.DateTime> CheckInDate
		{
			get
			{
				return this._CheckInDate;
			}
			set
			{
				if ((this._CheckInDate != value))
				{
					this.OnCheckInDateChanging(value);
					this.SendPropertyChanging();
					this._CheckInDate = value;
					this.SendPropertyChanged("CheckInDate");
					this.OnCheckInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckOutDate", DbType="Date")]
		public System.Nullable<System.DateTime> CheckOutDate
		{
			get
			{
				return this._CheckOutDate;
			}
			set
			{
				if ((this._CheckOutDate != value))
				{
					this.OnCheckOutDateChanging(value);
					this.SendPropertyChanging();
					this._CheckOutDate = value;
					this.SendPropertyChanged("CheckOutDate");
					this.OnCheckOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReservationDate
		{
			get
			{
				return this._ReservationDate;
			}
			set
			{
				if ((this._ReservationDate != value))
				{
					this.OnReservationDateChanging(value);
					this.SendPropertyChanging();
					this._ReservationDate = value;
					this.SendPropertyChanged("ReservationDate");
					this.OnReservationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfGuests", DbType="Int")]
		public System.Nullable<int> NumberOfGuests
		{
			get
			{
				return this._NumberOfGuests;
			}
			set
			{
				if ((this._NumberOfGuests != value))
				{
					this.OnNumberOfGuestsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfGuests = value;
					this.SendPropertyChanged("NumberOfGuests");
					this.OnNumberOfGuestsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_ExtraService", Storage="_ExtraServices", ThisKey="BookingId", OtherKey="BookingId")]
		[JsonIgnore]
		public EntitySet<ExtraService> ExtraServices
		{
			get
			{
				return this._ExtraServices;
			}
			set
			{
				this._ExtraServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_Invoice", Storage="_Invoices", ThisKey="BookingId", OtherKey="BookingId")]
        [JsonIgnore]
        public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_Booking", Storage="_Guest", ThisKey="GuestId", OtherKey="GuestId", IsForeignKey=true)]
        [JsonIgnore]
        public Guest Guest
		{
			get
			{
				return this._Guest.Entity;
			}
			set
			{
				Guest previousValue = this._Guest.Entity;
				if (((previousValue != value) 
							|| (this._Guest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guest.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Guest.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._GuestId = value.GuestId;
					}
					else
					{
						this._GuestId = default(int);
					}
					this.SendPropertyChanged("Guest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Booking", Storage="_Room", ThisKey="RoomId", OtherKey="RoomId", IsForeignKey=true)]
        [JsonIgnore]
        public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._RoomId = value.RoomId;
					}
					else
					{
						this._RoomId = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExtraServices(ExtraService entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_ExtraServices(ExtraService entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExtraServices")]
	public partial class ExtraService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExtraServiceId;
		
		private int _BookingId;
		
		private int _ServiceType;
		
		private decimal _Price;
		
		private EntityRef<Booking> _Booking;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExtraServiceIdChanging(int value);
    partial void OnExtraServiceIdChanged();
    partial void OnBookingIdChanging(int value);
    partial void OnBookingIdChanged();
    partial void OnServiceTypeChanging(int value);
    partial void OnServiceTypeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public ExtraService()
		{
			this._Booking = default(EntityRef<Booking>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraServiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExtraServiceId
		{
			get
			{
				return this._ExtraServiceId;
			}
			set
			{
				if ((this._ExtraServiceId != value))
				{
					this.OnExtraServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ExtraServiceId = value;
					this.SendPropertyChanged("ExtraServiceId");
					this.OnExtraServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingId", DbType="Int NOT NULL")]
		public int BookingId
		{
			get
			{
				return this._BookingId;
			}
			set
			{
				if ((this._BookingId != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookingIdChanging(value);
					this.SendPropertyChanging();
					this._BookingId = value;
					this.SendPropertyChanged("BookingId");
					this.OnBookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceType", DbType="Int NOT NULL")]
		public int ServiceType
		{
			get
			{
				return this._ServiceType;
			}
			set
			{
				if ((this._ServiceType != value))
				{
					this.OnServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceType = value;
					this.SendPropertyChanged("ServiceType");
					this.OnServiceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_ExtraService", Storage="_Booking", ThisKey="BookingId", OtherKey="BookingId", IsForeignKey=true)]
        [JsonIgnore]
        public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.ExtraServices.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.ExtraServices.Add(this);
						this._BookingId = value.BookingId;
					}
					else
					{
						this._BookingId = default(int);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Guests")]
	public partial class Guest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GuestId;
		
		private string _Name;
		
		private string _Contact;
		
		private string _Email;
		
		private string _IdentificationDocument;
		
		private EntitySet<Booking> _Bookings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuestIdChanging(int value);
    partial void OnGuestIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIdentificationDocumentChanging(string value);
    partial void OnIdentificationDocumentChanged();
    #endregion
		
		public Guest()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GuestId
		{
			get
			{
				return this._GuestId;
			}
			set
			{
				if ((this._GuestId != value))
				{
					this.OnGuestIdChanging(value);
					this.SendPropertyChanging();
					this._GuestId = value;
					this.SendPropertyChanged("GuestId");
					this.OnGuestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="NVarChar(50)")]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentificationDocument", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IdentificationDocument
		{
			get
			{
				return this._IdentificationDocument;
			}
			set
			{
				if ((this._IdentificationDocument != value))
				{
					this.OnIdentificationDocumentChanging(value);
					this.SendPropertyChanging();
					this._IdentificationDocument = value;
					this.SendPropertyChanged("IdentificationDocument");
					this.OnIdentificationDocumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_Booking", Storage="_Bookings", ThisKey="GuestId", OtherKey="GuestId")]
        [JsonIgnore]
        public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Guest = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Guest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoices")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceId;
		
		private int _BookingId;
		
		private System.DateTime _IssueDate;
		
		private decimal _StayTotal;
		
		private decimal _ExtrasTotal;
		
		private int _PaymentMethod;
		
		private decimal _Total;
		
		private EntityRef<Booking> _Booking;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIdChanging(int value);
    partial void OnInvoiceIdChanged();
    partial void OnBookingIdChanging(int value);
    partial void OnBookingIdChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnStayTotalChanging(decimal value);
    partial void OnStayTotalChanged();
    partial void OnExtrasTotalChanging(decimal value);
    partial void OnExtrasTotalChanged();
    partial void OnPaymentMethodChanging(int value);
    partial void OnPaymentMethodChanged();
    partial void OnTotalChanging(decimal value);
    partial void OnTotalChanged();
    #endregion
		
		public Invoice()
		{
			this._Booking = default(EntityRef<Booking>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingId", DbType="Int NOT NULL")]
		public int BookingId
		{
			get
			{
				return this._BookingId;
			}
			set
			{
				if ((this._BookingId != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookingIdChanging(value);
					this.SendPropertyChanging();
					this._BookingId = value;
					this.SendPropertyChanged("BookingId");
					this.OnBookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StayTotal", DbType="Decimal(10,2) NOT NULL")]
		public decimal StayTotal
		{
			get
			{
				return this._StayTotal;
			}
			set
			{
				if ((this._StayTotal != value))
				{
					this.OnStayTotalChanging(value);
					this.SendPropertyChanging();
					this._StayTotal = value;
					this.SendPropertyChanged("StayTotal");
					this.OnStayTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtrasTotal", DbType="Decimal(10,2) NOT NULL")]
		public decimal ExtrasTotal
		{
			get
			{
				return this._ExtrasTotal;
			}
			set
			{
				if ((this._ExtrasTotal != value))
				{
					this.OnExtrasTotalChanging(value);
					this.SendPropertyChanging();
					this._ExtrasTotal = value;
					this.SendPropertyChanged("ExtrasTotal");
					this.OnExtrasTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethod", DbType="Int NOT NULL")]
		public int PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Decimal(10,0) NOT NULL")]
		public decimal Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_Invoice", Storage="_Booking", ThisKey="BookingId", OtherKey="BookingId", IsForeignKey=true)]
        [JsonIgnore]
        public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._BookingId = value.BookingId;
					}
					else
					{
						this._BookingId = default(int);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rooms")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomId;
		
		private int _Number;
		
		private int _Type;
		
		private int _Capacity;
		
		private decimal _PricePerNight;
		
		private int _Status;
		
		private EntitySet<Booking> _Bookings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIdChanging(int value);
    partial void OnRoomIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnPricePerNightChanging(decimal value);
    partial void OnPricePerNightChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public Room()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerNight", DbType="Decimal(10,2) NOT NULL")]
		public decimal PricePerNight
		{
			get
			{
				return this._PricePerNight;
			}
			set
			{
				if ((this._PricePerNight != value))
				{
					this.OnPricePerNightChanging(value);
					this.SendPropertyChanging();
					this._PricePerNight = value;
					this.SendPropertyChanged("PricePerNight");
					this.OnPricePerNightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Booking", Storage="_Bookings", ThisKey="RoomId", OtherKey="RoomId")]
        [JsonIgnore]
        public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
}
#pragma warning restore 1591
