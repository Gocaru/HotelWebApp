@model HotelWebApp.Models.ReservationViewModel
@using HotelWebApp.Data.Entities

@{
    ViewData["Title"] = "New Reservation";
}

<div class="container mt-4">
    <h1>@ViewData["Title"]</h1>
    <p class="lead text-muted">Start by checking room availability for your desired dates.</p>
    <hr />

    <div class="row">
        <div class="col-lg-7 col-md-10">
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h4>Step 1: Check Availability</h4>
                </div>
                <div class="card-body">
                    <form action="/Reservations/Create" method="get">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" name="roomId" value="@Model.RoomId" />
                        <input type="hidden" name="source" value="@ViewBag.Source" />

                        <div class="row align-items-end">
                            <div class="col-sm-5">
                                <label for="checkInDate" class="control-label">Check-in Date</label>
                                <input name="checkInDate" id="checkInDate" type="date" class="form-control"
                                       value="@Model.CheckInDate.ToString("yyyy-MM-dd")" />
                                <span asp-validation-for="CheckInDate" class="text-danger"></span>
                            </div>
                            <div class="col-sm-5">
                                <label for="checkOutDate" class="control-label">Check-out Date</label>
                                <input name="checkOutDate" id="checkOutDate" type="date" class="form-control"
                                       value="@Model.CheckOutDate.ToString("yyyy-MM-dd")" />
                                <span asp-validation-for="CheckOutDate" class="text-danger"></span>
                            </div>
                            <div class="col-sm-2">
                                <button type="submit" class="btn btn-primary w-100">Search</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            @if (ViewBag.TriedSearch == true)
            {
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h4>Step 2: Complete Your Reservation</h4>
                    </div>
                    <div class="card-body">
                        @if (Model.Rooms != null && Model.Rooms.Any())
                        {
                            <form asp-action="Create" method="post">
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <input type="hidden" asp-for="CheckInDate" />
                                <input type="hidden" asp-for="CheckOutDate" />
                                <input type="hidden" asp-for="Source" />

                                @if (User.IsInRole("Employee"))
                                {
                                    <div class="form-group mb-3">
                                        <label asp-for="GuestId" class="control-label"></label>
                                        <select asp-for="GuestId" class="form-select" asp-items="Model.Guests" required>
                                            <option value="">-- Select a Guest --</option>
                                        </select>
                                    </div>
                                }

                                <div class="form-group mb-3">
                                    <label asp-for="RoomId" class="control-label">Available Rooms</label>
                                    <select asp-for="RoomId" class="form-select" asp-items="Model.Rooms" required>
                                        <option value="">-- Select a Room --</option>
                                    </select>
                                    <span asp-validation-for="RoomId" class="text-danger"></span>
                                </div>

                                <div class="form-group mb-3">
                                    <label asp-for="NumberOfGuests" class="control-label"></label>
                                    <input asp-for="NumberOfGuests" type="number" class="form-control" value="1" min="1" required />
                                    <span asp-validation-for="NumberOfGuests" class="text-danger"></span>
                                </div>

                                <div class="form-group mb-3">
                                    <label asp-for="PromotionId" class="control-label">
                                        <i class="fas fa-gift text-success"></i> Apply Promotion (Optional)
                                    </label>
                                    <select asp-for="PromotionId" class="form-select" asp-items="Model.Promotions">
                                        <option value="">-- No promotion --</option>
                                    </select>
                                    <small class="form-text text-muted">
                                        <i class="fas fa-info-circle"></i> Select a promotion to get a discount on your stay
                                    </small>
                                </div>

                                <div class="form-group mt-4">
                                    <input type="submit" value="Confirm Reservation" class="btn btn-primary" />
                                    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
                                </div>
                            </form>
                        }
                        else
                        {
                            <div class="alert alert-warning">No rooms available for the selected dates. Please try another period.</div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const checkInInput = document.getElementById('checkInDate');
            const checkOutInput = document.getElementById('checkOutDate');

             function updateCheckOutConstraints() {
                if (!checkInInput.value) {
                    return;
                }

                let checkInDate = new Date(checkInInput.value);
                let minCheckOutDate = new Date(checkInDate.getFullYear(), checkInDate.getMonth(), checkInDate.getDate() + 1);

                let minDateString = minCheckOutDate.toISOString().split('T')[0];

                checkOutInput.min = minDateString;

                if (checkOutInput.value < minDateString) {
                    checkOutInput.value = minDateString;
                }
            }

            async function updatePromotions() {
                if (!checkInInput.value || !checkOutInput.value || !promotionSelect) {
                    return;
                }

                try {
                    const response = await fetch(`/api/Promotions/available?checkInDate=${checkInInput.value}&checkOutDate=${checkOutInput.value}`);
                    const result = await response.json();

                    if (result.success && result.data) {
                        promotionSelect.innerHTML = '<option value="">-- No promotion --</option>';

                        result.data.forEach(promo => {
                            const option = document.createElement('option');
                            option.value = promo.id;
                            option.text = `${promo.title} (-${promo.discountPercentage}%)`;
                            promotionSelect.appendChild(option);
                        });

                        console.log(`✅ Updated promotions: ${result.data.length} available`);
                    }
                } catch (error) {
                    console.error('Error updating promotions:', error);
                }
            }

            checkInInput.addEventListener('change', function() {
                updateCheckOutConstraints();
                updatePromotions(); 
            });

            checkOutInput.addEventListener('change', function() {
                updatePromotions(); 
            });

            updateCheckOutConstraints();
        });
    </script>
}