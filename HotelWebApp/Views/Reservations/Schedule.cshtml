@using HotelWebApp.Data.Entities
@using HotelWebApp.Services

@{
    ViewData["Title"] = "Reservation Schedule";
}

<div class="text-center mb-4">
    <h1>@ViewData["Title"]</h1>
    <p class="lead text-muted">Timeline view of room occupancy.</p>
</div>

@Html.AntiForgeryToken()

<div id="reservationScheduler"></div>

<div class="card shadow-sm mb-3">
    <div class="card-body">
        <h6 class="card-title mb-2"><i class="fas fa-palette me-2"></i>Status Legend</h6>
        <div class="d-flex flex-wrap" style="gap: 1rem;">

            <span><span class="badge" style="background-color: #0d6efd;"> </span> @ReservationStatus.Confirmed.GetDisplayName()</span>
            <span><span class="badge" style="background-color: #198754;"> </span> @ReservationStatus.CheckedIn.GetDisplayName()</span>
            <span><span class="badge" style="background-color: #212529;"> </span> @ReservationStatus.CheckedOut.GetDisplayName()</span>
            <span><span class="badge" style="background-color: #dc3545;"> </span> @ReservationStatus.Cancelled.GetDisplayName()</span>
            <span><span class="badge" style="background-color: #ffc107;"> </span> @ReservationStatus.NoShow.GetDisplayName()</span>
            <span><span class="badge" style="background-color: #6c757d;"> </span> @ReservationStatus.Completed.GetDisplayName()</span>

        </div>
    </div>
</div>


<script id="eventTemplate" type="text/x-template">
    <div class="event-wrap" style="background-color: ${categoryColor};">
        <div class="event-subject">${subject}</div>
    </div>
</script>

<style>
    .event-wrap {
        width: 100%;
        height: 100%;
        padding: 2px 5px;
        color: white;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            var dataManager = new ej.data.DataManager({
                url: '@Url.Action("LoadSchedulerData", "Reservations")',
                adaptor: new ej.data.UrlAdaptor()
            });
            var roomResources = @Html.Raw(Json.Serialize(ViewBag.Rooms));

            var schedule = new ej.schedule.Schedule({
                height: 'auto',
                width: '100%',
                currentView: 'TimelineWeek',

                group: { allowGroupEditing: false, 
                },
                resources: [{
                    field: 'roomId',
                    title: 'Hotel Room',
                    name: 'Rooms',
                    dataSource: roomResources,
                    textField: 'text',
                    idField: 'id',
                    colorField: 'color'
                }],

                eventSettings: {
                    dataSource: dataManager,
                    enableTooltip: true,
                    tooltipTemplate: '<div><strong>${subject}</strong></div><hr><div>${description}</div>',

                    template: '#eventTemplate',

                    fields: {
                        id: 'id',
                        subject: { name: 'subject' },
                        startTime: { name: 'startTime' },
                        endTime: { name: 'endTime' },
                        description: { name: 'description' },
                        location: { name: 'location' },
                        resourceId: { name: 'roomId' },
                        cssClass: { name: 'categoryColor' }
                    }
                },

                eventClick: function(args) {
                args.cancel = true; 

                    var reservationId = args.event.id;
                    var detailsUrl = '@Url.Action("Details", "Reservations")' +
                                     '/' + reservationId +
                                     '?source=schedule'; 

                    window.location.href = detailsUrl;
                },

                    popupOpen: function(args) {
                        if (args.type === 'Editor' || args.type === 'QuickInfo') {

                            args.cancel = true;

                            var startDate = new Date(args.data.startTime || args.data.StartTime);
                            startDate.setHours(0, 0, 0, 0);

                            var today = new Date();
                            today.setHours(0, 0, 0, 0);

                            if (startDate < today) {
                                return;
                            }

                            var endDate = new Date(startDate.getTime());
                            endDate.setDate(startDate.getDate() + 1);

                            function formatDate(date) {
                                var d = new Date(date),
                                    month = '' + (d.getMonth() + 1),
                                    day = '' + d.getDate(),
                                    year = d.getFullYear();

                                if (month.length < 2)
                                    month = '0' + month;
                                if (day.length < 2)
                                    day = '0' + day;

                                return [year, month, day].join('-');
                            }

                            var formattedStartDate = formatDate(startDate);
                            var formattedEndDate = formatDate(endDate);


                            var roomId = args.data.roomId || args.data.RoomId || (args.data.groupData && args.data.groupData.roomId);

                            var createUrl = '@Url.Action("Create", "Reservations")' +
                                            '?checkInDate=' + formattedStartDate +
                                            '&checkOutDate=' + formattedEndDate +
                                            '&source=schedule';

                            if (roomId) {
                                createUrl += '&roomId=' + roomId;
                            }

                            window.location.href = createUrl;
                        }
                },

                    views: [
                        { option: 'TimelineDay', allowVirtualScrolling: false, displayName: 'Daily Timeline', group: { byDate: true, resources: ['Rooms'] } },
                        { option: 'TimelineWeek', allowVirtualScrolling: false, displayName: 'Weekly Timeline', group: { byDate: true, resources: ['Rooms'] } },
                        { option: 'Month', displayName: 'Monthly Calendar' },
                        { option: 'Agenda' }
                    ],
            });

            schedule.appendTo('#reservationScheduler');
        });
    </script>
}